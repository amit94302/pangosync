name: build-and-push-docker

on:
  workflow_dispatch: # allows the workflow to be run manually when desired
    branches:
      - main
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
      - 'LICENSE'

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: network=${{ secrets.DOCKER_NETWORK_NAME_GITEA }} # Required to access gitea-runner by hostname

      - name: Read version from file
        id: version
        run: |
          if [ ! -f VERSION ]; then
            echo "VERSION file not found!"
            exit 1
          fi
          VERSION=$(cat VERSION | tr -d '\n\r' | xargs)
          if [ -z "$VERSION" ]; then
            echo "VERSION file is empty!"
            exit 1
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Version: $VERSION"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Prepare for build
        run: |
          echo "üöÄ Building version ${{ env.VERSION }}..."
          echo "This will overwrite any existing tags with the same version"

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            amit94302/pangosync:${{ env.VERSION }}
            amit94302/pangosync:latest
            ghcr.io/amit94302/pangosync:${{ env.VERSION }}
            ghcr.io/amit94302/pangosync:latest
          labels: |
            org.opencontainers.image.title=pangosync
            org.opencontainers.image.description=Create/update Pangolin resources based on Traefik labels for docker-swarm services
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.source=${{ gitea.server_url }}/${{ gitea.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

      - name: Update Docker Hub description
        uses: peter-evans/dockerhub-description@v4
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: amit94302/pangosync
          readme-filepath: ./README.md

      - name: Clean up untagged images in GHCR
        continue-on-error: true
        run: |
          echo "Cleaning up untagged images in GHCR..."
          
          # Skip gh CLI authentication issues and use curl directly
          echo "Using curl for GitHub API cleanup to avoid authentication scope issues..."
          
          # Check if jq is available
          if ! command -v jq &> /dev/null; then
            echo "jq not available, attempting to install..."
            if command -v apt-get &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            elif command -v yum &> /dev/null; then
              sudo yum install -y jq
            else
              echo "Cannot install jq, skipping cleanup"
              exit 0
            fi
          fi
          
          # Get untagged package versions using curl
          echo "Fetching untagged images..."
          VERSIONS=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/users/${{ secrets.GHCR_USERNAME }}/packages/container/pangosync/versions" \
            | jq -r '.[] | select(.metadata.container.tags == []) | .id' 2>/dev/null || echo "")
          
          if [ -z "$VERSIONS" ]; then
            echo "No untagged images found or API call failed"
            exit 0
          fi
          
          # Count untagged versions
          COUNT=$(echo "$VERSIONS" | wc -l)
          echo "Found $COUNT untagged image(s) to delete"
          
          # Delete untagged versions using curl
          echo "$VERSIONS" | while read -r id; do
            if [ -n "$id" ] && [ "$id" != "null" ]; then
              echo "Deleting untagged version ID: $id"
              RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -X DELETE \
                -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
                -H "Accept: application/vnd.github+json" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/users/${{ secrets.GHCR_USERNAME }}/packages/container/pangosync/versions/$id")
              
              if [ "$RESPONSE" = "204" ]; then
                echo "‚úÖ Successfully deleted version $id"
              else
                echo "‚ùå Failed to delete version $id (HTTP $RESPONSE)"
              fi
            fi
          done
          
          echo "Cleanup completed"

      - name: Summary
        run: |
          echo "## üê≥ Docker Build Summary"
          echo "- **Version:** ${{ env.VERSION }}"
          echo "- **Platforms:** linux/amd64, linux/arm64"
          echo "- **Tags pushed:**"
          echo "  - \`amit94302/pangosync:${{ env.VERSION }}\`"
          echo "  - \`amit94302/pangosync:latest\`"
          echo "  - \`ghcr.io/amit94302/pangosync:${{ env.VERSION }}\`"
          echo "  - \`ghcr.io/amit94302/pangosync:latest\`"
          echo ""
          echo "Build completed successfully! üéâ"